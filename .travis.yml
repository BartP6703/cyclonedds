language: c

# Coverity Scan can be configured through Travis addons, but this allows for
# more control over the build instructions and does not require the addition
# of a coverity_scan branch in the repository. travisci_build_coverity_scan.sh
# does more checks before it decides to download Coverity (around 500M), but
# these instructions assume Coverity Scan is not installed if the directory
# does not exist and expects the download to fail if the token is incorrect.
# Coverity Scan quota are not checked as the Coverity enabled build must only
# run from cron.
install_coverity: &install_coverity
  if [ "${COVERITY_SCAN}" = "true" ]; then
    COV_DIR="/tmp/coverity-scan-analysis";
    COV_ARC="/tmp/cov-analysis-${COV_PLATFORM}.tgz";
    test ! -d "${COV_DIR}" &&
      mkdir -p "${COV_DIR}" &&
      curl -s -S -F project="${TRAVIS_REPO_SLUG}"
                 -F token="${COVERITY_SCAN_TOKEN}"
                 -o "${COV_ARC}"
                 "https://scan.coverity.com/download/cxx/${COV_PLATFORM}" &&
      tar -xzf "${COV_ARC}" -C "${COV_DIR}";
    COV_ANALYSIS=$(find "${COV_DIR}" -type d -name "cov-analysis*");
    eval "export PATH=\"${PATH}:${COV_ANALYSIS}/bin\"";
    eval "export SCAN_BUILD=\"cov-build --dir cov-int\"";
    cov-configure --comptype ${COV_COMPTYPE} --compiler ${CC} --template;
  fi

submit_to_coverity_scan: &submit_to_coverity_scan
  if [ "${COVERITY_SCAN}" = "true" ]; then
    tar -czf analysis-results.tgz cov-int &&
    curl -s -S -F project="${TRAVIS_REPO_SLUG}"
               -F token="${COVERITY_SCAN_TOKEN}"
               -F file=@analysis-results.tgz
               -F version=$(git rev-parse --short HEAD)
               -F description="Travis CI build"
               -F email="${COVERITY_SCAN_EMAIL:=cyclonedds-inbox@eclipse.org}"
               "https://scan.coverity.com/builds";
  fi

linux_gcc8: &linux_gcc8
  os: linux
  dist: xenial
  compiler: gcc
  #  addons:
  #  apt:
  #    update: true
  #    sources: [ ubuntu-toolchain-r-test ]
  #    packages: [ gcc-8 g++-8 ]
  before_install:
  #  - eval "export CC=gcc-8"
  #    - eval "export CXX=g++-8"
  #    - eval "export COV_COMPTYPE=gcc COV_PLATFORM=linux64"
  install:
    - *install_coverity
    - pip install conan --upgrade --user

linux_clang: &linux_clang
  os: linux
  dist: xenial
  compiler: clang
  addons:
    apt:
      update: true
  before_install:
    - eval "export CC=clang"
    - eval "export CXX=clang++"
    - eval "export COV_COMPTYPE=clang COV_PLATFORM=linux64"
  install:
    - pip install conan --upgrade --user

osx_xcode10_2: &osx_xcode10_2
  os: osx
  osx_image: xcode10.2
  compiler: clang
  addons:
    homebrew:
      packages:
      - pyenv-virtualenv
  before_install:
    - eval "export CC=clang"
    - eval "export CXX=clang++"
    - eval "export COV_COMPTYPE=clang COV_PLATFORM=macOSX"
  install:
    - eval "$(pyenv init -)"
    - pyenv virtualenv conan
    - pyenv rehash
    - pyenv activate conan
    - pip install conan --upgrade

windows_vs2017: &windows_vs2017
  os: windows
  # Conan will automatically determine the best compiler for a given platform
  # based on educated guesses. The first check is based on the CC and CXX
  # environment variables, the second (on Windows) is to check if Microsoft
  # Visual Studio is installed. On Travis CC and CXX are set to gcc on
  # Microsoft Windows targets as well, this has the undesired effect that MSVC
  # is not detected, unsetting CC and CXX solves that problem.
  #
  #
  # !!! IMPORTANT !!!
  #
  # Microsoft Windows instances freeze at "install:" if secure environment
  # variables are used. There is no option to export secrets only for
  # specified platforms. The "filter_secrets: false" option is used to disable
  # the filter for Microsoft Windows instances. This is not an issue if the
  # secret is removed from the environment at the earliest opportunity, before
  # risk of exposure, as secrets are always removed from the environment for
  # pull requests and are still filtered when exported to the environment. The
  # secret of course will not be available for Microsoft Windows builds, but
  # for Coverity Scan, that is fine.
  filter_secrets: false
  before_install:
    - eval "unset COVERITY_SCAN_TOKEN"
    - eval "unset COVERITY_SCAN_EMAIL"
    - eval "unset CC"
    - eval "unset CXX"
    - eval "export COV_COMPTYPE=msvc COV_PLATFORM=win64"
    - JAVA_HOME=$(find "/c/Program Files/Android/jdk/" -name "*openjdk*" | sort | head -n 1)
    - export JAVA_HOME
    - export PATH="${PATH}:${JAVA_HOME}/bin"
  # Windows targets in Travis are still very much in beta and Python is not yet
  # available and installation of Python through Chocolaty does not work well.
  # The real fix is to wait until Python and pip are both available on the
  # target. Until then download Conan from the official website and simply add
  # the extracted folder to the path.
  install:
    - choco install innoextract
    - choco install maven --ignore-dependencies
    - wget -q https://dl.bintray.com/conan/installers/conan-win-64_1_10_0.exe
    - innoextract conan-win-64_1_10_0.exe
    - eval "export PATH=\"$(pwd)/app/conan:${PATH}\""

jobs:
  include:
    #- <<: *linux_gcc8
    #  env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Debug, SSL=YES, GENERATOR="Unix Makefiles", COVERITY_SCAN=true ]
    #  if: type = cron
    - <<: *linux_gcc8
      env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Debug, SSL=NO, FREERTOS=NO, GENERATOR="Unix Makefiles" ]
    - <<: *linux_gcc8
      env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Debug, SSL=NO, FREERTOS=YES, GENERATOR="Unix Makefiles" ]
    - <<: *linux_gcc8
      env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Debug, SSL=NO, FREERTOS=YES, LWIP=YES, GENERATOR="Unix Makefiles" ]
    #- <<: *linux_gcc8
    #  env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Debug, SSL=YES, GENERATOR="Unix Makefiles" ]
    #- <<: *linux_gcc8
    #  env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Release, SSL=YES, GENERATOR="Unix Makefiles" ]
    #- <<: *linux_gcc8
    #  env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Debug, SSL=NO, GENERATOR="Unix Makefiles" ]
    #- <<: *linux_gcc8
    #  env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Release, SSL=YES, GENERATOR="Unix Makefiles" ]
    #- <<: *linux_clang
    #  env: [ ARCH=x86_64, ASAN=address, BUILD_TYPE=Debug, SSL=YES, GENERATOR="Unix Makefiles" ]
    #- <<: *linux_clang
    #  env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Release, SSL=YES, GENERATOR="Unix Makefiles" ]
    #- <<: *osx_xcode10_2
    #  env: [ ARCH=x86_64, ASAN=address, BUILD_TYPE=Debug, SSL=YES, GENERATOR="Unix Makefiles" ]
    #- <<: *osx_xcode10_2
    #  env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Release, SSL=YES, GENERATOR="Unix Makefiles" ]
    #- <<: *windows_vs2017
    #  env: [ ARCH=x86, ASAN=none, BUILD_TYPE=Debug, SSL=YES, GENERATOR="Visual Studio 15 2017" ]
    #- <<: *windows_vs2017
    #  env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Debug, SSL=YES, GENERATOR="Visual Studio 15 2017 Win64" ]
    #- <<: *windows_vs2017
    #  env: [ ARCH=x86_64, ASAN=none, BUILD_TYPE=Release, SSL=YES, GENERATOR="Visual Studio 15 2017 Win64" ]

before_script:
  - conan profile new default --detect
  - conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan

script:
  - if [ "${FREERTOS}" != "NO" ]; then
      cd ports/freertos-posix;
      git clone https://github.com/shlinym/FreeRTOS-Sim.git;
      mkdir build;
      cd build;
      cmake -DCMAKE_INSTALL_PREFIX=$(pwd)/install ..;
      cmake --build . --target install;
      cd ../../..;
    fi
  - if [ "${LWIP}" != "NO" ]; then
      cd workspace/bsp/libsrc/lwip210/contrib/ports/unix/lib;
      mkdir build;
      cd build;
      cmake -DCMAKE_INSTALL_PREFIX=$(pwd)/install ..;
      cmake --build . --target install;
      cd ../../../../../../../../..;
    fi
  - mkdir build
  - cd build
  - conan install -b missing -s arch=${ARCH} -s build_type=${BUILD_TYPE} ..
  - echo "build_type:${BUILD_TYPE}"
  - if [ "${FREERTOS}" != "NO" ]; then
      if [ "${LWIP}" != "NO" ]; then
        cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
              -DCMAKE_TOOLCHAIN_FILE=../toolchain.cmake
              -DCMAKE_INSTALL_PREFIX=$(pwd)/install
              -DUSE_SANITIZER=${ASAN}
              -DENABLE_SSL=${SSL}
              -DBUILD_TESTING=on
              -DWITH_FREERTOS=on
              -DWITH_LWIP=on
              -G "${GENERATOR}" .. || true;
      else
        cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
              -DCMAKE_TOOLCHAIN_FILE=../toolchain.cmake
              -DCMAKE_INSTALL_PREFIX=$(pwd)/install
              -DUSE_SANITIZER=${ASAN}
              -DENABLE_SSL=${SSL}
              -DBUILD_TESTING=on
              -DWITH_FREERTOS=on
              -G "${GENERATOR}" .. || true;
      fi;
    else
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
            -DCMAKE_INSTALL_PREFIX=$(pwd)/install
            -DUSE_SANITIZER=${ASAN}
            -DENABLE_SSL=${SSL}
            -DBUILD_TESTING=on
            -G "${GENERATOR}" .. || true;
    fi
  - case "${GENERATOR}" in
      "Unix Makefiles")
        ${SCAN_BUILD} cmake --build . --config ${BUILD_TYPE} --target install -- -j 4
        ;;
      "Visual Studio "*)
        ${SCAN_BUILD} cmake --build . --config ${BUILD_TYPE} --target install -- -nologo -verbosity:minimal -maxcpucount -p:CL_MPCount=2
        ;;
      *)
        ${SCAN_BUILD} cmake --build . --config ${BUILD_TYPE} --target install
        ;;
    esac || true
  - /sbin/ifconfig
  - CYCLONEDDS_URI='<CycloneDDS><Domain><Internal><EnableExpensiveChecks>all</EnableExpensiveChecks></Internal><Tracing><Verbosity>finest</Verbosity><OutputFile>lite.log</OutputFile></Tracing></Domain></CycloneDDS>' ctest -j 4 --output-on-failure -T test -I 0,0,,17,18,19,27,28,31,46,61,78,79,80,90,91,94,95,99,100,103,106,107,108,110,111,118,119,125,126,129,131,135,136,146,147,149,150,151,152,154,155,156,158,166,167,171,173,174,175,178,182,183,185,186,187,190,191,192,195,197,198,199,200,201,202,203,208,211,213,220,225,227,228,229,230,234,240,245,248,250,251,255,257,263,274,275,281,282,288,289,290,292,294,297,302,304,305,311,313,331,344,349,351,354,357,361,362,369,370,371,372,376,379,380,382,383,385,386,390,391,392,393,394,396,398,402,404,408,413,416,418,419,420,421,422,424,425,426,428,429,433,435,436,438,439,440,444,447,448,450,451,454,460,462,465,466,467,469,477,479,482,483,485,498,500,501,504,505,507,509,515,519,520,522,523,524,525,533,536,537,539,544,545,546,547,550,558,561,563,565,566,568,571,574,575,577,581,590,596,599,600,601,602,605,606,609,620,625,629,630,631,637,640,642,645,647,648,650,653,654,658,660,663,667,669,677,682,683,684,685,686,688,689,696,697,698,700,704,705,709,710 -C ${BUILD_TYPE}
  - find -name lite.log -exec echo file:{} \; -exec cat {} \;
  - if [ "${ASAN}" != "none" ]; then
      CMAKE_LINKER_FLAGS="-DCMAKE_LINKER_FLAGS=-fsanitize=${USE_SANITIZER}";
      CMAKE_C_FLAGS="-DCMAKE_C_FLAGS=-fsanitize=${USE_SANITIZER}";
    fi
  - mkdir install/share/CycloneDDS/examples/helloworld/build
  - cd install/share/CycloneDDS/examples/helloworld/build
  - cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
          ${CMAKE_C_FLAGS}
          ${CMAKE_LINKER_FLAGS}
          -G "${GENERATOR}" ..
  - cmake --build . --config ${BUILD_TYPE} || true
  - cd "${TRAVIS_BUILD_DIR}/build"
  - ls -l bin/* || true

after_success:
  - *submit_to_coverity_scan

